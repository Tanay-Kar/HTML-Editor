# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'e:\HTML Editor\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(521, 404)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setDocumentMode(True)
        self.tabWidget.setTabsClosable(True)
        self.tabWidget.setMovable(True)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tabWidget.addTab(self.tab, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.action_New = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Images/new.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_New.setIcon(icon)
        self.action_New.setObjectName("action_New")
        self.action_Save = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Images/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Save.setIcon(icon1)
        self.action_Save.setObjectName("action_Save")
        self.action_Open = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Images/open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Open.setIcon(icon2)
        self.action_Open.setObjectName("action_Open")
        self.action_Refresh = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/Images/refresh.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Refresh.setIcon(icon3)
        self.action_Refresh.setObjectName("action_Refresh")
        self.action_Dark = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/Images/dark.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Dark.setIcon(icon4)
        self.action_Dark.setObjectName("action_Dark")
        self.action_Light = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/Images/light.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Light.setIcon(icon4)
        self.action_Light.setObjectName("action_Light")
        self.toolBar.addAction(self.action_New)
        self.toolBar.addAction(self.action_Open)
        self.toolBar.addAction(self.action_Save)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_Refresh)
        self.toolBar.addAction(self.action_Dark)
        self.toolBar.addAction(self.action_Light)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.action_New.setText(_translate("MainWindow", "&New"))
        self.action_New.setToolTip(_translate("MainWindow", "Create New file"))
        self.action_New.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.action_Save.setText(_translate("MainWindow", "&Save"))
        self.action_Save.setToolTip(_translate("MainWindow", "Save current file"))
        self.action_Save.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.action_Open.setText(_translate("MainWindow", "&open"))
        self.action_Open.setToolTip(_translate("MainWindow", "Open HTML file"))
        self.action_Open.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.action_Refresh.setText(_translate("MainWindow", "&Refresh"))
        self.action_Refresh.setToolTip(_translate("MainWindow", "Refresh current preview"))
        self.action_Refresh.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.action_Dark.setText(_translate("MainWindow", "&Dark"))
        self.action_Dark.setToolTip(_translate("MainWindow", "Change theme to dark"))
        self.action_Dark.setShortcut(_translate("MainWindow", "Ctrl+Shift+T"))
        self.action_Light.setText(_translate("MainWindow", "&Light"))
        self.action_Light.setToolTip(_translate("MainWindow", "Change theme to light"))
        self.action_Light.setShortcut(_translate("MainWindow", "Ctrl+Shift+T"))
import Resources.resource_rc

class Parent(Ui_MainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        


if __name__ == '__main__':
    import sys
    
    app = QApplication([])
    window = Parent()
    window.show()
    sys.exit(app.exec_())
    